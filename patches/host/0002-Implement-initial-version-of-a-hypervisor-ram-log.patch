From 0c513f1701aeebf0f41d2f1307396796e3ef6ce0 Mon Sep 17 00:00:00 2001
From: Grigoriy Romanov <grigoriy.romanov@unikie.com>
Date: Tue, 23 Apr 2024 18:35:23 +0300
Subject: [PATCH] Implement initial version of a hypervisor ram log

Ramlog allows to store data that reveals a hypervisor work

As it could contain crucial information ramlog entries being encrypted
For that purpose the log logically divied on 64byte size entries to be
usable with Chacha20 stream cipher algorithm which was chosen

In this stage keys are dummy ones and stored directly in sources, its so
before keystorage will be designed and implemented.

To track log entries in time timestamp generation was implemented, it
is not corresponding to kernel timestamps. To distinguish them in
possible shared output hyp ram log timestamps marked as 'rl'

For the moment it is convenient to print logs in a console so the patch is
dependent from a hyp_print() enabling patch -
0001-Improved-debug-printings-on-EL2-for-5.15.patch
the dependency also reflected in Kconfig

Signed-off-by: Grigoriy Romanov <grigoriy.romanov@unikie.com>
---
 arch/arm64/kvm/Kconfig                      |   8 +
 arch/arm64/kvm/hyp/include/nvhe/chacha.h    |  47 +++++
 arch/arm64/kvm/hyp/include/nvhe/dump_regs.h |  14 ++
 arch/arm64/kvm/hyp/include/nvhe/ramlog.h    |  60 ++++++
 arch/arm64/kvm/hyp/nvhe/Makefile            |   5 +-
 arch/arm64/kvm/hyp/nvhe/crypto/chacha.c     | 169 ++++++++++++++++
 arch/arm64/kvm/hyp/nvhe/debug/dump_regs.c   |  21 ++
 arch/arm64/kvm/hyp/nvhe/ramlog.c            | 212 ++++++++++++++++++++
 arch/arm64/kvm/hyp/nvhe/setup.c             |   6 +
 9 files changed, 541 insertions(+), 1 deletion(-)
 create mode 100644 arch/arm64/kvm/hyp/include/nvhe/chacha.h
 create mode 100644 arch/arm64/kvm/hyp/include/nvhe/dump_regs.h
 create mode 100644 arch/arm64/kvm/hyp/include/nvhe/ramlog.h
 create mode 100644 arch/arm64/kvm/hyp/nvhe/crypto/chacha.c
 create mode 100644 arch/arm64/kvm/hyp/nvhe/debug/dump_regs.c
 create mode 100644 arch/arm64/kvm/hyp/nvhe/ramlog.c

diff --git a/arch/arm64/kvm/Kconfig b/arch/arm64/kvm/Kconfig
index f74f8682a650..761fd2acdaec 100644
--- a/arch/arm64/kvm/Kconfig
+++ b/arch/arm64/kvm/Kconfig
@@ -82,4 +82,12 @@ config KVM_ARM_HYP_DEBUG_UART_ADDR
 	hex "Physical address of the PL011 for EL2 to use"
 	depends on KVM_ARM_HYP_DEBUG_UART
 	default 0x0900000
+
+config KVM_ARM_NVHE_HYP_RAMLOG
+	bool "Presense of a hypervisor ramlog"
+	depends on KVM_ARM_HYP_DEBUG_UART
+	default y
+	help
+	  Hypervisor ramlog collects register dumps and other data separately from
+	  a kernel log. Hypervisor log is encrypted with a stream cipher.
 endif # VIRTUALIZATION
diff --git a/arch/arm64/kvm/hyp/include/nvhe/chacha.h b/arch/arm64/kvm/hyp/include/nvhe/chacha.h
new file mode 100644
index 000000000000..ecae6926c609
--- /dev/null
+++ b/arch/arm64/kvm/hyp/include/nvhe/chacha.h
@@ -0,0 +1,47 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef _KVM_ARM_NVHE_CHACHA_H
+#define _KVM_ARM_NVHE_CHACHA_H
+
+#define CHACHA_KEY_SIZE		32
+#define CHACHA_BLOCK_SIZE	64
+
+#define CHACHA_STATE_WORDS	(CHACHA_BLOCK_SIZE / sizeof(u32))
+
+#include <asm/unaligned.h>
+
+void chacha_crypt_generic(u32 *state, u8 *dst, const u8 *src,
+			  unsigned int bytes, int nrounds);
+
+enum chacha_constants { /* expand 32-byte k */
+	CHACHA_CONSTANT_EXPA = 0x61707865U,
+	CHACHA_CONSTANT_ND_3 = 0x3320646eU,
+	CHACHA_CONSTANT_2_BY = 0x79622d32U,
+	CHACHA_CONSTANT_TE_K = 0x6b206574U
+};
+
+static inline void chacha_init_consts(u32 *state)
+{
+	state[0]  = CHACHA_CONSTANT_EXPA;
+	state[1]  = CHACHA_CONSTANT_ND_3;
+	state[2]  = CHACHA_CONSTANT_2_BY;
+	state[3]  = CHACHA_CONSTANT_TE_K;
+}
+
+static inline void chacha_init_generic(u32 *state, const u32 *key, const u8 *iv)
+{
+	chacha_init_consts(state);
+	state[4]  = key[0];
+	state[5]  = key[1];
+	state[6]  = key[2];
+	state[7]  = key[3];
+	state[8]  = key[4];
+	state[9]  = key[5];
+	state[10] = key[6];
+	state[11] = key[7];
+	state[12] = get_unaligned_le32(iv +  0);
+	state[13] = get_unaligned_le32(iv +  4);
+	state[14] = get_unaligned_le32(iv +  8);
+	state[15] = get_unaligned_le32(iv + 12);
+}
+
+#endif //_KVM_ARM_NVHE_CHACHA_H
diff --git a/arch/arm64/kvm/hyp/include/nvhe/dump_regs.h b/arch/arm64/kvm/hyp/include/nvhe/dump_regs.h
new file mode 100644
index 000000000000..20b26c7aa18d
--- /dev/null
+++ b/arch/arm64/kvm/hyp/include/nvhe/dump_regs.h
@@ -0,0 +1,14 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef _KVM_ARM64_DUMP_REGS_H
+#define _KVM_ARM64_DUMP_REGS_H
+
+#include <linux/kernel.h>
+#include <nvhe/ramlog.h>
+
+#ifdef CONFIG_KVM_ARM_NVHE_HYP_RAMLOG
+void debug_dump_csrs(void);
+#else
+void debug_dump_csrs(void) { }
+#endif
+
+#endif /* _KVM_ARM64_DUMP_REGS_H */
diff --git a/arch/arm64/kvm/hyp/include/nvhe/ramlog.h b/arch/arm64/kvm/hyp/include/nvhe/ramlog.h
new file mode 100644
index 000000000000..6e00d0fdf82f
--- /dev/null
+++ b/arch/arm64/kvm/hyp/include/nvhe/ramlog.h
@@ -0,0 +1,60 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef __NVHE_RAMLOG_H
+#define __NVHE_RAMLOG_H
+
+#ifdef CONFIG_KVM_ARM_NVHE_HYP_RAMLOG
+#include <linux/kernel.h>
+#include <linux/string.h>
+#include <asm/page-def.h>
+#include <hyp/hyp_print.h>
+#include <nvhe/chacha.h>
+
+#define LOG_ENTRY_LENGTH 64
+
+#define __hyp_read_reg(r)                                    \
+	__extension__({                                        \
+		uint64_t value;                                    \
+		__asm__ __volatile__("mrs	%0, " #r               \
+					 : "=r"(value));                       \
+		value;                                             \
+	})
+
+#define hyp_ramlog_ts(fmt, ...) do { \
+		gettimestamp(&hts);         \
+		hyp_ramlog("[rl %d.%ld] " fmt, hts.sec, hts.nsec, __VA_ARGS__);  \
+} while (0)
+
+#define hyp_ramlog_reg(reg) \
+		hyp_ramlog_ts(#reg "\t- %016llx\n", __hyp_read_reg(reg))
+
+struct hyp_timestamp {
+	u64 sec;
+	u64 nsec;
+};
+
+extern int hyp_vsnprintf(char *a, size_t b, const char *c, va_list d);
+extern struct hyp_timestamp hts;
+
+inline void gettimestamp(struct hyp_timestamp *);
+
+inline char *rlogp_head(void);
+
+inline char *rlogp_entry(int entry);
+
+inline int rlog_cur_entry(void);
+
+void hyp_ramlog(const char *fmt, ...);
+
+void print_rlog(void);
+
+#else /* CONFIG_KVM_ARM_NVHE_HYP_RAMLOG */
+#define hyp_ramlog_ts(...)
+#define hyp_ramlog_reg(reg)
+inline void  gettimestamp(struct hyp_timestamp *) {}
+inline char *rlogp_head(void) { return ""; }
+inline char *rlogp_entry(int entry) { return NULL; }
+inline int   rlog_cur_entry(void) { return -1; }
+void hyp_ramlog(const char *fmt, ...) {}
+void print_rlog(void) { return "ramlog is disabled"; }
+#endif /* CONFIG_KVM_ARM_NVHE_HYP_RAMLOG */
+#endif /* __NVHE_RAMLOG_H */
diff --git a/arch/arm64/kvm/hyp/nvhe/Makefile b/arch/arm64/kvm/hyp/nvhe/Makefile
index 62de0aae2825..941240273429 100644
--- a/arch/arm64/kvm/hyp/nvhe/Makefile
+++ b/arch/arm64/kvm/hyp/nvhe/Makefile
@@ -6,12 +6,15 @@ hyp-obj-y := timer-sr.o sysreg-sr.o debug-sr.o switch.o tlb.o hyp-init.o host.o
 	 hyp-main.o hyp-smp.o psci-relay.o early_alloc.o page_alloc.o \
 	 cache.o setup.o mm.o mem_protect.o sys_regs.o pkvm.o stacktrace.o ffa.o iommu.o \
 	 serial.o
-hyp-obj-y += ../vgic-v3-sr.o ../aarch32.o ../vgic-v2-cpuif-proxy.o ../entry.o
+hyp-obj-y += ../vgic-v3-sr.o ../aarch32.o ../vgic-v2-cpuif-proxy.o ../entry.o
 hyp-obj-y += debug/print.o debug/subr_prf.o debug/strlen.o \
 	 ../fpsimd.o ../hyp-entry.o ../exception.o ../pgtable.o
 hyp-obj-$(CONFIG_TRACING) += clock.o events.o trace.o
 hyp-obj-$(CONFIG_DEBUG_LIST) += list_debug.o
 hyp-obj-$(CONFIG_MODULES) += modules.o
+hyp-obj-$(CONFIG_KVM_ARM_NVHE_HYP_RAMLOG) += debug/dump_regs.o \
+											 crypto/chacha.o \
+											 ramlog.o
 hyp-obj-y += $(lib-objs)

 $(obj)/hyp.lds: $(src)/hyp.lds.S FORCE
diff --git a/arch/arm64/kvm/hyp/nvhe/crypto/chacha.c b/arch/arm64/kvm/hyp/nvhe/crypto/chacha.c
new file mode 100644
index 000000000000..1a63a559e4d5
--- /dev/null
+++ b/arch/arm64/kvm/hyp/nvhe/crypto/chacha.c
@@ -0,0 +1,169 @@
+// SPDX-License-Identifier: GPL-2.0
+#include <linux/string.h>
+#include <linux/bitops.h>
+
+#include <nvhe/chacha.h>
+#include <asm-generic/unaligned.h>
+#include <asm-generic/bug.h>
+
+void __crypto_xor(u8 *dst, const u8 *src1, const u8 *src2, unsigned int len)
+{
+	int relalign = 0;
+
+	if (!IS_ENABLED(CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS)) {
+		int size = sizeof(unsigned long);
+		int d = (((unsigned long)dst ^ (unsigned long)src1) |
+			 ((unsigned long)dst ^ (unsigned long)src2)) &
+			(size - 1);
+
+		relalign = d ? 1 << __ffs(d) : size;
+
+		/*
+		 * If we care about alignment, process as many bytes as
+		 * needed to advance dst and src to values whose alignments
+		 * equal their relative alignment. This will allow us to
+		 * process the remainder of the input using optimal strides.
+		 */
+		while (((unsigned long)dst & (relalign - 1)) && len > 0) {
+			*dst++ = *src1++ ^ *src2++;
+			len--;
+		}
+	}
+
+	while (IS_ENABLED(CONFIG_64BIT) && len >= 8 && !(relalign & 7)) {
+		*(u64 *)dst = *(u64 *)src1 ^  *(u64 *)src2;
+		dst += 8;
+		src1 += 8;
+		src2 += 8;
+		len -= 8;
+	}
+
+	while (len >= 4 && !(relalign & 3)) {
+		*(u32 *)dst = *(u32 *)src1 ^ *(u32 *)src2;
+		dst += 4;
+		src1 += 4;
+		src2 += 4;
+		len -= 4;
+	}
+
+	while (len >= 2 && !(relalign & 1)) {
+		*(u16 *)dst = *(u16 *)src1 ^ *(u16 *)src2;
+		dst += 2;
+		src1 += 2;
+		src2 += 2;
+		len -= 2;
+	}
+
+	while (len--)
+		*dst++ = *src1++ ^ *src2++;
+}
+
+static inline void crypto_xor_cpy(u8 *dst, const u8 *src1, const u8 *src2,
+				  unsigned int size)
+{
+	if (IS_ENABLED(CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS) &&
+		__builtin_constant_p(size) &&
+		(size % sizeof(unsigned long)) == 0) {
+		unsigned long *d = (unsigned long *)dst;
+		unsigned long *s1 = (unsigned long *)src1;
+		unsigned long *s2 = (unsigned long *)src2;
+
+		while (size > 0) {
+			*d++ = *s1++ ^ *s2++;
+			size -= sizeof(unsigned long);
+		}
+	} else {
+		__crypto_xor(dst, src1, src2, size);
+	}
+}
+
+static void chacha_permute(u32 *x, int nrounds)
+{
+	int i;
+
+	for (i = 0; i < nrounds; i += 2) {
+		x[0]  += x[4];    x[12] = rol32(x[12] ^ x[0],  16);
+		x[1]  += x[5];    x[13] = rol32(x[13] ^ x[1],  16);
+		x[2]  += x[6];    x[14] = rol32(x[14] ^ x[2],  16);
+		x[3]  += x[7];    x[15] = rol32(x[15] ^ x[3],  16);
+
+		x[8]  += x[12];   x[4]  = rol32(x[4]  ^ x[8],  12);
+		x[9]  += x[13];   x[5]  = rol32(x[5]  ^ x[9],  12);
+		x[10] += x[14];   x[6]  = rol32(x[6]  ^ x[10], 12);
+		x[11] += x[15];   x[7]  = rol32(x[7]  ^ x[11], 12);
+
+		x[0]  += x[4];    x[12] = rol32(x[12] ^ x[0],   8);
+		x[1]  += x[5];    x[13] = rol32(x[13] ^ x[1],   8);
+		x[2]  += x[6];    x[14] = rol32(x[14] ^ x[2],   8);
+		x[3]  += x[7];    x[15] = rol32(x[15] ^ x[3],   8);
+
+		x[8]  += x[12];   x[4]  = rol32(x[4]  ^ x[8],   7);
+		x[9]  += x[13];   x[5]  = rol32(x[5]  ^ x[9],   7);
+		x[10] += x[14];   x[6]  = rol32(x[6]  ^ x[10],  7);
+		x[11] += x[15];   x[7]  = rol32(x[7]  ^ x[11],  7);
+
+		x[0]  += x[5];    x[15] = rol32(x[15] ^ x[0],  16);
+		x[1]  += x[6];    x[12] = rol32(x[12] ^ x[1],  16);
+		x[2]  += x[7];    x[13] = rol32(x[13] ^ x[2],  16);
+		x[3]  += x[4];    x[14] = rol32(x[14] ^ x[3],  16);
+
+		x[10] += x[15];   x[5]  = rol32(x[5]  ^ x[10], 12);
+		x[11] += x[12];   x[6]  = rol32(x[6]  ^ x[11], 12);
+		x[8]  += x[13];   x[7]  = rol32(x[7]  ^ x[8],  12);
+		x[9]  += x[14];   x[4]  = rol32(x[4]  ^ x[9],  12);
+
+		x[0]  += x[5];    x[15] = rol32(x[15] ^ x[0],   8);
+		x[1]  += x[6];    x[12] = rol32(x[12] ^ x[1],   8);
+		x[2]  += x[7];    x[13] = rol32(x[13] ^ x[2],   8);
+		x[3]  += x[4];    x[14] = rol32(x[14] ^ x[3],   8);
+
+		x[10] += x[15];   x[5]  = rol32(x[5]  ^ x[10],  7);
+		x[11] += x[12];   x[6]  = rol32(x[6]  ^ x[11],  7);
+		x[8]  += x[13];   x[7]  = rol32(x[7]  ^ x[8],   7);
+		x[9]  += x[14];   x[4]  = rol32(x[4]  ^ x[9],   7);
+	}
+}
+
+/**
+ * chacha_block_generic - generate one keystream block and increment block counter
+ * @state: input state matrix (16 32-bit words)
+ * @stream: output keystream block (64 bytes)
+ * @nrounds: number of rounds (20 or 12; 20 is recommended)
+ *
+ * This is the ChaCha core, a function from 64-byte strings to 64-byte strings.
+ * The caller has already converted the endianness of the input.  This function
+ * also handles incrementing the block counter in the input matrix.
+ */
+void chacha_block_generic(u32 *state, u8 *stream, int nrounds)
+{
+	u32 x[16];
+	int i;
+
+	memcpy(x, state, 64);
+
+	chacha_permute(x, nrounds);
+
+	for (i = 0; i < ARRAY_SIZE(x); i++)
+		put_unaligned_le32(x[i] + state[i], &stream[i * sizeof(u32)]);
+
+	state[12]++;
+}
+
+void chacha_crypt_generic(u32 *state, u8 *dst, const u8 *src,
+			  unsigned int bytes, int nrounds)
+{
+	/* aligned to potentially speed up crypto_xor() */
+	u8 stream[CHACHA_BLOCK_SIZE] __aligned(sizeof(long));
+
+	while (bytes >= CHACHA_BLOCK_SIZE) {
+		chacha_block_generic(state, stream, nrounds);
+		crypto_xor_cpy(dst, src, stream, CHACHA_BLOCK_SIZE);
+		bytes -= CHACHA_BLOCK_SIZE;
+		dst += CHACHA_BLOCK_SIZE;
+		src += CHACHA_BLOCK_SIZE;
+	}
+	if (bytes) {
+		chacha_block_generic(state, stream, nrounds);
+		crypto_xor_cpy(dst, src, stream, bytes);
+	}
+}
diff --git a/arch/arm64/kvm/hyp/nvhe/debug/dump_regs.c b/arch/arm64/kvm/hyp/nvhe/debug/dump_regs.c
new file mode 100644
index 000000000000..d87bbc2045ad
--- /dev/null
+++ b/arch/arm64/kvm/hyp/nvhe/debug/dump_regs.c
@@ -0,0 +1,21 @@
+// SPDX-License-Identifier: GPL-2.0
+#include <linux/kernel.h>
+#include <linux/bitops.h>
+#include <nvhe/dump_regs.h>
+
+#include <hyp/hyp_print.h>
+#include <nvhe/chacha.h>
+#include <asm/barrier.h>
+#include <asm/page-def.h>
+#include <nvhe/mm.h>
+
+void debug_dump_csrs(void)
+{
+	hyp_ramlog_reg(TTBR0_EL2);
+	hyp_ramlog_reg(TTBR0_EL1);
+	hyp_ramlog_reg(TTBR1_EL1);
+	hyp_ramlog_reg(ESR_EL2);
+	hyp_ramlog_reg(HPFAR_EL2);
+	hyp_ramlog_reg(FAR_EL2);
+	hyp_ramlog_reg(VTTBR_EL2);
+}
diff --git a/arch/arm64/kvm/hyp/nvhe/ramlog.c b/arch/arm64/kvm/hyp/nvhe/ramlog.c
new file mode 100644
index 000000000000..e6f44cb008e2
--- /dev/null
+++ b/arch/arm64/kvm/hyp/nvhe/ramlog.c
@@ -0,0 +1,212 @@
+// SPDX-License-Identifier: GPL-2.0
+#include <nvhe/ramlog.h>
+
+#ifdef CONFIG_KVM_ARM_NVHE_HYP_RAMLOG
+
+/* Tiny ram log */
+char __rlog[PAGE_SIZE];
+int __rp;
+
+static inline void unvalid_log_chacha(void);
+static inline bool is_log_chacha_initialized(void);
+
+/* keys should to be gotten from keystorage when it will be implemented */
+u32 chacha_state[16] = {0};
+u32 chacha_key[8] = {
+	0x09080706, 0x10203040, 0x05060708, 0x50607080,
+	0xa9a8a7a6, 0x1a2a3a4a, 0xa5a6a7a8, 0x5a6a7a8a
+};
+u8 chacha_iv[16] = {
+	0x10, 0x0f, 0x02, 0xe0,
+	0x30, 0x0d, 0x04, 0xc0,
+	0x50, 0x0b, 0x06, 0xa0,
+	0x70, 0x09, 0x08, 0x80,
+};
+
+struct hyp_timestamp hts = {0};
+
+static inline u64 getcntpct_el0(void)
+{
+	u64 res;
+
+	isb();
+	asm volatile("mrs %0, cntpct_el0" : "=r" (res) :: "memory");
+	return res;
+}
+
+static inline u64 getcntfrq_el0(void)
+{
+	u64 res;
+
+	isb();
+	asm volatile("mrs %0, cntfrq_el0" : "=r" (res) :: "memory");
+	return res;
+}
+
+/* poor implementation of the timer from cntpct_el0
+ * could be not accurate in lowest orders
+ */
+inline void gettimestamp(struct hyp_timestamp *hts)
+{
+	int i;
+	u64 nsec = 0, rem = 0;
+	u64 clks = getcntpct_el0();
+	u64 freq = getcntfrq_el0();
+
+	hts->sec = clks/freq;
+	rem = clks % freq;
+	for (i = 0; i < 10; i++) {
+		freq /= 10;
+		nsec += rem / freq;
+		rem = rem % freq;
+		nsec *= 10;
+	}
+	hts->nsec = nsec / 10;
+}
+
+inline char *rlogp_head(void)
+{
+	return __rlog;
+}
+
+/* returns a pointer to 64-byte entry
+ */
+inline char *rlogp_entry(int entry)
+{
+	return &__rlog[entry * LOG_ENTRY_LENGTH];
+}
+
+inline int rlog_cur_entry(void)
+{
+	return __rp / LOG_ENTRY_LENGTH;
+}
+
+static void __decrypt_log_data(void)
+{
+	 /* temporarily initial chacha state written
+	  * to the first entry of the log, use it for decrytion and skip
+	  * during decryption itself
+	  */
+	int log_len = rlog_cur_entry() * LOG_ENTRY_LENGTH;
+
+	 chacha_crypt_generic((u32 *) rlogp_head(),
+					      rlogp_entry(1),
+					      rlogp_entry(1),
+					      log_len,
+					      20);
+	 unvalid_log_chacha();
+}
+
+static void __encrypt_log_data(void)
+{
+	if (__rp > LOG_ENTRY_LENGTH && is_log_chacha_initialized()) {
+		chacha_crypt_generic(chacha_state,
+							rlogp_entry(1),
+							rlogp_entry(1),
+							rlog_cur_entry() * LOG_ENTRY_LENGTH,
+							20);
+	}
+}
+
+/* generate chacha init state and encrypt log data of there is presence of it */
+static inline void log_chacha_init(void)
+{
+	chacha_init_generic(chacha_state, chacha_key, chacha_iv);
+	/* put whole chacha's init state into the first log entry */
+	/* TODO: crypt it with ECDH shared secret */
+	memcpy(rlogp_head(), chacha_state, 64);
+	if (__rp < LOG_ENTRY_LENGTH)
+		__rp = LOG_ENTRY_LENGTH;
+	else
+		__encrypt_log_data();
+}
+
+static inline bool is_log_chacha_initialized(void)
+{
+	/* TODO: find more proper way checking valid chacha state */
+	if (chacha_state[0] == 0 && chacha_state[1] == 0)
+		return false;
+	return true;
+}
+
+static inline void log_chacha_check_and_init(void)
+{
+	if (!is_log_chacha_initialized())
+		log_chacha_init();
+}
+
+static inline void unvalid_log_chacha(void)
+{
+	chacha_state[0] = 0;
+	chacha_state[1] = 0;
+}
+
+/* fill log entry with padding to make it 64byte multiple sized */
+static inline void __align_log_entry(void)
+{
+	if (__rlog[__rp - 1] == '\n')
+		__rp--;
+	for (; __rp % LOG_ENTRY_LENGTH != 0; __rp++)
+		__rlog[__rp] = ' ';
+	__rlog[__rp - 2] = '.';
+	__rlog[__rp - 1] = '\0';
+}
+
+
+void hyp_ramlog(const char *fmt, ...)
+{
+	va_list args;
+	int count = 0;
+	unsigned int head_to_crypt, written_entries;
+
+	/* if log array contains less than 2*LOG_ENTRY_LENGTH - reinit log
+	 */
+	if ((__rp + 2 * LOG_ENTRY_LENGTH) >= PAGE_SIZE) {
+		unvalid_log_chacha();
+		__rp = 0;
+	}
+
+	log_chacha_check_and_init();
+
+	va_start(args, fmt);
+	count = hyp_vsnprintf(&__rlog[__rp], 2 * LOG_ENTRY_LENGTH, fmt, args);
+	va_end(args);
+
+	__rp += count;
+
+	/* align entry to be multiple of LOG_ENTRY_LENGTH
+	 * __rp will be moved to be multiple of 64
+	 */
+	__align_log_entry();
+
+	/* crypt new log entry(ies) in place
+	 */
+	written_entries = count / LOG_ENTRY_LENGTH + 1;
+	head_to_crypt = rlog_cur_entry() - written_entries;
+	chacha_crypt_generic(chacha_state,
+					     rlogp_entry(head_to_crypt),
+					     rlogp_entry(head_to_crypt),
+					     written_entries * LOG_ENTRY_LENGTH,
+					     20);
+
+	/* to remove: For to read string from a debugger */
+	//hyp_print("!!! __rlog addr is - 0x%016llx\n", __rlog);
+}
+
+/* to be removed - for debug purposes
+ */
+void print_rlog(void)
+{
+	int i = rlog_cur_entry();
+
+	__decrypt_log_data();
+	for (; i > 1; i--)
+		hyp_print("%s\n", rlogp_entry(rlog_cur_entry() - i + 1));
+
+	/* after decryption current chacha state is invalid. reinit chacha
+	 * if there is data it will be encrypted again
+	 */
+	log_chacha_init();
+}
+
+#endif /* CONFIG_KVM_ARM_NVHE_HYP_RAMLOG */
diff --git a/arch/arm64/kvm/hyp/nvhe/setup.c b/arch/arm64/kvm/hyp/nvhe/setup.c
index 19a5b421cd38..efcf490384a4 100644
--- a/arch/arm64/kvm/hyp/nvhe/setup.c
+++ b/arch/arm64/kvm/hyp/nvhe/setup.c
@@ -21,6 +21,9 @@
 #include <nvhe/serial.h>
 #include <nvhe/trap_handler.h>

+#include <hyp/hyp_print.h>
+#include <nvhe/dump_regs.h>
+
 unsigned long hyp_nr_cpus;

 phys_addr_t pvmfw_base;
@@ -439,6 +442,9 @@ void __noreturn __pkvm_init_finalise(void)
 		goto out;

 	pkvm_hyp_vm_table_init(vm_table_base);
+
+	debug_dump_csrs();
+	print_rlog();
 out:
 	/*
 	 * We tail-called to here from handle___pkvm_init() and will not return,
--
2.44.0

